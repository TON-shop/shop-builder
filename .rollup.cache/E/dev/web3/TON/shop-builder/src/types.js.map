{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,IAAI","sourcesContent":["// export interface Element {\r\n//   name: ComponentName;\r\n//   variety: string;\r\n//   props?: any;\r\n// }\r\n\r\n// export type Layout = Array<Element>;\r\n\r\n// export interface RouteType {\r\n//   title?: string;\r\n//   description?: string;\r\n//   layout: Layout;\r\n// }\r\n\r\n// export interface Store {\r\n//   id: string;\r\n//   name: string;\r\n//   icon: string;\r\n//   description: string;\r\n//   routes: Record<string, RouteType>;\r\n// }\r\n\r\nexport type UnionToArray<U> = U extends any ? U[] : never;\r\n\r\nexport type UnionToIntersection<U> = (\r\n  U extends any ? (arg: U) => any : never\r\n) extends (arg: infer I) => void\r\n  ? I\r\n  : never;\r\n\r\nexport type UnionToTuple<T> = UnionToIntersection<\r\n  T extends any ? (t: T) => T : never\r\n> extends (_: any) => infer W\r\n  ? [...UnionToTuple<Exclude<T, W>>, W]\r\n  : [];\r\n\r\nexport type Mutable<Type> = {\r\n  -readonly [Key in keyof Type]: Type[Key];\r\n};\r\n"]}